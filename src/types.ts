/**
 * @see https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#Output_Format_.28out:.29
 */
export const enum Format {
   JSON = 'json',
   XML = 'xml',
   /**
    * CSV output format returns OSM data as csv document, which can be directly
    * opened in tools like LibreOffice. It requires additional configuration
    * parameters to define a list of fields to display, as well as two optional
    * parameters for adding/removing the CSV header line and changing the column
    * separator.
    *
    * @example
    * [out:csv( fieldname_1 [,fieldname_n ...] [; csv-headerline [; csv-separator-character ] ] )]
    */
   CSV = 'csv',
   Custom = 'custom',
   Popup = 'popup'
}

/**
 * Verbosity flag to follow `out` directive.
 * @see https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#out
 */
export const enum Verbosity {
   /** Output only the IDs of the elements in the set */
   OnlyIDs = 'ids',
   /**
    * Output the minimum information necessary for geometry. This includes the
    * ID and coordinates for nodes; the ID of a way and the IDs of its member
    * nodes; and for relations, the ID of the relation, and the type, ID, and
    * role of all of its members.
    */
   Geometry = 'skel',
   /**
    * Output only ids and tags for each element and not coordinates or members
    */
   TagsAndIDs = 'tags',
   /**
    * Output all information necessary to use the data. These are also tags for
    * all elements and the roles for relation members.
    */
   Standard = 'body',
   /**
    * Output everything known about the elements. This includes everything
    * output by `Standard` for each OSM element, as well as the version,
    * changeset ID, timestamp, and the user data of the user that last touched
    * the object. Derived elements' metadata attributes are also missing for
    * derived elements. The modificator noids lets all ids to be omitted from
    * the statement.
    */
   Maximum = 'meta'
}

/**
 * Geo-location flag to follow `out` direction. The default is to add no such
 * information.
 * @see https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#out
 */
export const enum GeoLocate {
   /**
    * Add the full geometry to each object. This adds coordinates to each node,
    * to each node member of a way or relation, and it adds a sequence of `nd`
    * members with coordinates to all relations.
    */
   Full = 'geom',
   /**
    * Adds only the bounding box of each element to the element. For nodes this
    * is equivalent to `Full`. For ways it is the enclosing bounding box of all
    * nodes. For relations it is the enclosing bounding box of all node and way
    * members, relations as members have no effect.
    */
   BoundingBox = 'bb',
   /**
    * This adds only the center of the above mentioned bounding box to ways and
    * relations. Note: The center point is not guaranteed to lie inside the
    * polygon.
    *
    * @example
    * [bbox:{{bbox}}];
    * area[boundary=postal_code][postal_code="65343"];
    * rel(pivot);out center;>;out;
    */
   Center = 'center'
}

/**
 * Optional sort option to follow `out` directive. The default is `ObjectID`.
 * @see https://wiki.openstreetmap.org/wiki/Overpass_API/Overpass_QL#out
 */
export const enum SortBy {
   /** Sort by OSM element ID */
   ObjectID = 'asc',
   /**
    * Sort by quadtile index; this is roughly geographical and significantly
    * faster than order by IDs (derived elements generated by make or convert
    * statements without any geometry will be grouped separately, only sorted by
    * ID).
    */
   QuadTileIndex = 'qt'
}

export interface Statement {
   maybe: boolean
}
